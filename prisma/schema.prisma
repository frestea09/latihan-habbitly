// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  username          String            @unique
  password          String
  habits            Habit[]
  tasks             Task[]
  learningRoadmaps  LearningRoadmap[]
  transactions      Transaction[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Habit {
  id        String      @id @default(cuid())
  name      String
  category  HabitCategory
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  logs      HabitLog[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model HabitLog {
  id              String  @id @default(cuid())
  habit           Habit   @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId         String
  date            DateTime @db.Date
  completed       Boolean
  journal         String?
  reasonForMiss   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  position    Int
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LearningRoadmap {
  id        String         @id @default(cuid())
  topic     String
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  steps     LearningStep[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model LearningStep {
  id          String           @id @default(cuid())
  title       String
  completed   Boolean          @default(false)
  roadmap     LearningRoadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  roadmapId   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Transaction {
  id          String          @id @default(cuid())
  date        DateTime        @db.Date
  type        TransactionType
  amount      Float
  category    String
  description String
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum HabitCategory {
  morning
  after_dhuhr
  afternoon_evening
  sleep_prep
}

enum TransactionType {
  income
  expense
}
